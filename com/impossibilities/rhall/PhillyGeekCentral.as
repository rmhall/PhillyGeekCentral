/*	The MIT License	 	Copyright (c) 2010 Robert M. Hall, II, Inc. dba Feasible Impossibilities	rhall@impossibilities.com - http://www.impossibilities.com/	 	Permission is hereby granted, free of charge, to any person obtaining a copy	of this software and associated documentation files (the "Software"), to deal	in the Software without restriction, including without limitation the rights	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell	copies of the Software, and to permit persons to whom the Software is	furnished to do so, subject to the following conditions:	 	The above copyright notice and this permission notice shall be included in	all copies or substantial portions of the Software.	 	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN	THE SOFTWARE.*/package com.impossibilities.rhall{	// Adobe RSS library imports	import com.adobe.utils.XMLUtil;	import com.adobe.xml.syndication.rss.Item20;	import com.adobe.xml.syndication.rss.RSS20;	// Tweening imports	import com.greensock.*;	import com.greensock.easing.*;		// Analytics library for google	import com.google.analytics.GATracker;	// Standard imports	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.events.MouseEvent;	import flash.display.Sprite;	import flash.display.Sprite;	import flash.text.StyleSheet;	import flash.text.TextField;	import flash.geom.Rectangle;	import flash.net.navigateToURL;	import flash.utils.*;	public class PhillyGeekCentral extends Sprite	{		// Define our vars		var loader:URLLoader;		var itemCount:Number = 0;		var listItemCount:Number = 0;		var urlInfo:String;		var urlRegister:String;		var currMouseX:Number;		var currMouseY:Number;		var swipeRef;		//URL of RSS 2.0 feed and upcoming meeting/event .xml		var RSS_URL:String = "http://www.pfpaug.org/core/rss.xml";		var Event_URL:String = "http://www.pfpaug.org/core/meeting.xml";		var bottomList:Sprite = new Sprite();		var bigList:Sprite = new Sprite();		var upDown:Sprite = new arrows();		var sliderTitle:Sprite = new entriesTitle();		var appCSS:StyleSheet = new StyleSheet();		//the text area		var items:Array;		final public function PhillyGeekCentral()		{			super();			homeButt.alpha = 0;			entryDetail.alpha = 0;			entrymask2.x = 0;			entryContainer.mask = entrymask2;			appCSS.setStyle("body", {fontSize:'15',color:'#000066'});			appCSS.setStyle("t1" ,{fontSize:'15',color:'#000000', fontWeight:'bold'});			appCSS.setStyle("t2" ,{fontSize:'14',color:'#ffffff', fontWeight:'bold'});			appCSS.setStyle("t3" ,{fontSize:'14',color:'#ffffff'});			appCSS.setStyle("da", {fontSize:'12', color:'#666666'});			appCSS.setStyle("h1", {fontSize:'25',color:'#000000'});			appCSS.setStyle("h2", {fontSize:'19',color:'#000000', fontWeight:'bold'});			appCSS.setStyle("h3", {fontSize:'14',color:'#333333'});			appCSS.setStyle("a:link", {color:'#0000CC',textDecoration:'underline'});			appCSS.setStyle("a:hover", {color:'#0000FF',textDecoration:'underline'});			appCSS.setStyle("b", {fontWeight:'bold'});			appCSS.setStyle("em", {fontWeight:'bold'});			//ensure html support and apply css to it			entryContainer.rssEntry.styleSheet = appCSS;			// Handle ABOUT/INFO Screen			infoButt.addEventListener(MouseEvent.MOUSE_DOWN, infoClick);			infoButt.addEventListener(MouseEvent.MOUSE_UP, infoClickUP);			infoButt.addEventListener(MouseEvent.MOUSE_OUT, infoClickOUT);			// Kick off loading, and parsing of data/creation of lists			// Begin the loader indicator animation			addEventListener(Event.ENTER_FRAME,rotateLoader);			loadEvent();		}		final function rotateLoader(event:Event)		{			event.stopPropagation();			loader_mc.rotation +=  30;		}		//called when user presses the button to load feed		final function onLoadPress():void		{			loader = new URLLoader();			//request pointing to feed			var request:URLRequest = new URLRequest(RSS_URL);			request.method = URLRequestMethod.GET;			//listen for when the data loads			loader.addEventListener(Event.COMPLETE, onDataLoad);			//listen for error events			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);			//load the feed data			loader.load(request);						// Calls to Google Analytics go here			// removed from open source - uncomment and insert your own here			/*			var tracker:GATracker;			tracker = new GATracker(this, "MY-GA-CODE-GOES-HERE", "AS3", false);			tracker.trackPageview("/PHILLYGEEKCENTRAL");			*/					}		//called once the data has loaded from the feed		final function onDataLoad(e:Event):void		{			//get the raw string data from the feed			var rawRSS:String = URLLoader(e.target).data;			// trace(rawRSS);			parseRSS(rawRSS);		}		//parses RSS 2.0 feed and prints out the feed titles into		final function parseRSS(rssdata:String):void		{			// trace(rssdata);			var isValid:Boolean = com.adobe.utils.XMLUtil.isValidXML(rssdata);			if (! isValid)			{				meetingInfo.styleSheet = appCSS;				meetingInfo.htmlText = "<t3>Sorry - Invalid RSS 2.0 feed.</t3><br/><t3>Please try again later.</t3>";				turnOffButtons();				removeEventListener(Event.ENTER_FRAME,rotateLoader);				loader_mc.visible = false;				return;			}			//create RSS20 instance			var rss:RSS20 = new RSS20();			//parse the raw rss data			rss.parse(rssdata);			//get all of the items within the feed			items = rss.items;			// create big scrolling list			for each (var item:Item20 in items)			{				writeOutputList("<t1>"+item.title+"</t1>", item.pubDate);			}			entrymask.x = 0;			bigList.mask = entrymask;			bigList.cacheAsBitmap = true;			addChild(bigList);			bigList.x = 330;			bigList.y = 61;			var itemFooter:titleClipFooter = new titleClipFooter();			itemFooter.y = Math.round(Number(((listItemCount) * 44)-16));			bigList.addChild(itemFooter);			/*			writeOutputList("<t1>DUMMY1</t1>", items[0].pubDate);			writeOutputList("<t1>DUMMY2</t1>", items[0].pubDate);			writeOutputList("<t1>DUMMY3</t1>", items[0].pubDate);			writeOutputList("<t1>DUMMY4</t1>", items[0].pubDate);			writeOutputList("<t1>DUMMY5</t1>", items[0].pubDate);			writeOutputList("<t1>DUMMY6</t1>", items[0].pubDate);			writeOutputList("<t1>DUMMY7</t1>", items[0].pubDate);			writeOutputList("<t1>DUMMY8</t1>", items[0].pubDate);			writeOutputList("<t1>DUMMY9</t1>", items[0].pubDate);			*/			var loop:int = 0;			for (loop=0; loop<4; loop++)			{				writeOutput("<t1>"+items[loop].title+"</t1>", items[loop].pubDate);			}			writeOutput("<t1>Previous entries...</t1>",new Date());			bottomList.cacheAsBitmap = true;			//bottomList.mask = entryMask;			bottomList.y = 256;			addChild(bottomList);			removeEventListener(Event.ENTER_FRAME,rotateLoader);			loader_mc.visible = false;		}		final function loadEvent():void		{			loader = new URLLoader();			var request:URLRequest = new URLRequest(Event_URL);			request.method = URLRequestMethod.GET;			loader.addEventListener(Event.COMPLETE, onEventDataLoad);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);			//load the feed data			loader.load(request);		}		//called once the data has loaded from the feed		final function onEventDataLoad(e:Event):void		{			//get the raw string data from the feed			//var rawXML:String = URLLoader(e.target).data;			var xmlEventData = new XML(e.target.data);			var headline = xmlEventData.meeting.headline;			urlInfo = xmlEventData.meeting.urlInfo;			urlRegister = xmlEventData.meeting.urlRegister;			meetingInfo.styleSheet = appCSS;			meetingInfo.htmlText = "<t3>Next Meeting:</t3><br/><t2>" + headline + "</t2>";			moreButt.addEventListener(MouseEvent.MOUSE_DOWN, handleButtDownState);			rsvpButt.addEventListener(MouseEvent.MOUSE_DOWN, handleButtDownState);			//moreButt.addEventListener(MouseEvent.MOUSE_DOWN, handleButtDownState);			moreButt.addEventListener(MouseEvent.MOUSE_OUT, handleButtOUTState, true);			moreButt.addEventListener(MouseEvent.MOUSE_UP, handleButtUPState, true);			//rsvpButt.addEventListener(MouseEvent.MOUSE_DOWN, handleButtDownState);			rsvpButt.addEventListener(MouseEvent.MOUSE_OUT, handleButtOUTState, true);			rsvpButt.addEventListener(MouseEvent.MOUSE_UP, handleButtUPState, true);			onLoadPress();		}		final function handleButtDownState(event:MouseEvent):void		{			event.stopPropagation();			if (event.currentTarget.name == "moreButt")			{				moreButt.coremc.gotoAndStop(2);			}			if (event.currentTarget.name == "rsvpButt")			{				rsvpButt.coremc.gotoAndStop(2);			}		}		final function handleButtOUTState(event:MouseEvent):void		{			event.stopPropagation();			if (event.currentTarget.name == "moreButt")			{				moreButt.coremc.gotoAndStop(1);			}			if (event.currentTarget.name == "rsvpButt")			{				rsvpButt.coremc.gotoAndStop(1);			}		}		final function handleButtUPState(event:MouseEvent):void		{			event.stopPropagation();			var url:String = "";			switch (event.currentTarget.name)			{				case "moreButt" :					moreButt.coremc.gotoAndStop(1);					url = urlInfo;					break;				case "rsvpButt" :					rsvpButt.coremc.gotoAndStop(1);					url = urlRegister;					break;			}			var request:URLRequest = new URLRequest(url);			try			{				navigateToURL(request, '_blank');			}			catch (e:Error)			{				trace("Error occurred!");			}		}		final function getUSClockTime(hrs:uint, mins:uint):String		{			var modifier:String = "PM";			var minLabel:String = doubleDigitFormat(mins);			if (hrs > 12)			{				hrs = hrs - 12;			}			else if (hrs == 0)			{				modifier = "AM";				hrs = 12;			}			else if (hrs < 12)			{				modifier = "AM";			}			return (doubleDigitFormat(hrs) + ":" + minLabel + " " + modifier);		}		final function doubleDigitFormat(num:uint):String		{			if (num < 10)			{				return ("0" + num);			}			return String(num);		}		final function formatDate(date:Date, tiny:Boolean=false):String		{			var monthLabels:Array = new Array("January","February","March","April","May","June","July","August","September","October","November","December");			var parsed_Date:String = doubleDigitFormat(date.getMonth() + 1) + "/" + doubleDigitFormat(date.getDay()) + "/" + date.getFullYear();			if (tiny)			{				parsed_Date +=  "<br/>" + getUSClockTime(date.getHours(),date.getMinutes());			}			else			{				parsed_Date +=  " " + getUSClockTime(date.getHours(),date.getMinutes());			}			return parsed_Date;		}		final function writeOutputList(titleData:String, pubDate:Date):void		{			var itemTitle:titleClip = new titleClip();			addChild(sliderTitle);			sliderTitle.x = 330;			sliderTitle.y = 7;			sliderTitle.alpha = 0;			itemTitle.outputField.styleSheet = appCSS;			itemTitle.outputField.text = titleData;			itemTitle.dateField.htmlText = "<da>" + String(formatDate(pubDate,true)) + "</da>";			var itemName:String = "title_" + listItemCount;			itemTitle.name = itemName;			itemTitle.opaqueBackground = 0xffffff;			var ref = bigList.addChild(itemTitle);			ref.addEventListener(MouseEvent.CLICK, bigrecentClickHandler, false,3,false);			ref.addEventListener(MouseEvent.MOUSE_DOWN, bigrecentPressHandler,false,3,false);			ref.addEventListener(MouseEvent.MOUSE_UP, bigrecentReleaseHandler, false,3,false);			ref.addEventListener(MouseEvent.MOUSE_OUT, bigrecentMouseOutHandler, false,3,false);			itemTitle.y = Math.round(Number(((listItemCount) * 44)-16));			listItemCount++;		}		final function writeOutput(titleData:String, pubDate:Date):void		{			var itemTitle:titleClip = new titleClip();			itemTitle.outputField.styleSheet = appCSS;			itemTitle.outputField.text = titleData;			if (titleData == "<t1>Previous entries...</t1>")			{				itemTitle.dateField.text = "";				itemTitle.outputField.y +=  8;			}			else			{				itemTitle.dateField.htmlText = "<da>" + String(formatDate(pubDate,true)) + "</da>";			}			var itemName:String = "title_" + itemCount;			itemTitle.name = itemName;			itemTitle.opaqueBackground = 0xffffff;			var ref = bottomList.addChild(itemTitle);			ref.addEventListener(MouseEvent.CLICK, recentClickHandler, false,3,false);			ref.addEventListener(MouseEvent.MOUSE_DOWN, recentPressHandler,false,3,false);			ref.addEventListener(MouseEvent.MOUSE_UP, recentReleaseHandler, false,3,false);			ref.addEventListener(MouseEvent.MOUSE_OUT, recentMouseOutHandler, false,3,false);			itemTitle.y = Math.round(Number(((itemCount) * 44)-16));			//outputField.appendText( data + "\n");			itemCount++;			// addEventListener("SWIPE_UP", bottomUpSwipe);			// addEventListener("SWIPE_DOWN", bottomDownSwipe);		}		/*		var blistY:Number;				final function bottomUpSwipe(event:Event):void		{		var yPos = bottomList.y;		blistY = yPos;		TweenLite.to(bottomList, .25, {y: yPos-60, onComplete: upSwipeDone});		//TweenLite.to(bottomList, .25, {y: yPos, delay: .25, ease:Elastic.easeOut});		trace(event);		}				final function upSwipeDone():void		{		TweenLite.to(bottomList, .25, {y: blistY, ease:Elastic.easeOut});		}				final function downSwipeDone():void		{		TweenLite.to(bottomList, .25, {y: blistY, ease:Elastic.easeOut});		}				final function bottomDownSwipe(event:Event):void		{		var yPos = bottomList.y;		blistY = yPos;		TweenLite.to(bottomList, .25, {y: yPos+60, onComplete: downSwipeDone});		//TweenLite.to(bottomList, .25, {y: yPos, delay: .25, ease:Elastic.easeOut});		trace(event);		}		*/		final function recentClickHandler(event:MouseEvent):void		{			event.stopPropagation();			trace(event.currentTarget.name);			if (event.currentTarget.name == "title_4")			{				slideToList();			}			else			{				slideToRSSEntry(event.currentTarget.name);			}		}		final function bigrecentClickHandler(event:MouseEvent):void		{			event.stopPropagation();			trace(event.currentTarget.name);			TweenLite.to(bigList, .25, {x: -330});			bigslideToRSSEntry(event.currentTarget.name);		}		final function bigrecentPressHandler(event:MouseEvent):void		{			event.stopPropagation();			currMouseY = mouseY;			var clicked:Number = Number(event.currentTarget.name.split("_")[1]);			var itemRef = bigList.getChildByName(String("title_" + clicked));			swipeRef = setTimeout(deferredDown,100,itemRef);		}		final function deferredDown(ref):void		{			if (mouseY < currMouseY - 5)			{				trace("SWIPED UP!");				bigList.addEventListener(MouseEvent.MOUSE_UP, bigUp);				bigList.addEventListener(MouseEvent.MOUSE_OUT, bigUp);				bigList.addEventListener(MouseEvent.MOUSE_MOVE, bigMove);				trace("BEFORE:"+bigList.y);				bigList.startDrag(false,new Rectangle(0, 460-((listItemCount+2)*44), 0, 180 ) );				trace("AFTER:"+bigList.y);			}			else if (mouseY > currMouseY + 5)			{				trace("SWIPED DOWN!");				TweenLite.to(bigList, .25, {y: 110,onComplete: backToTop });				//bigList.startDrag(false,new Rectangle(0, 180, 0, -bigList.height));				//bigList.addEventListener(MouseEvent.MOUSE_UP, bigUp);				//bigList.addEventListener(MouseEvent.MOUSE_MOVE, bigMove);			}			else			{				ref.opaqueBackground = 0x333333;				ref.outputField.textColor = 0xffffff;				ref.dateField.textColor = 0xffffff;				ref.arrow.color = 0xffffff;			}			trace("HEIGHT: "+bigList.height, bigList.y  );		}		final function backToTop():void		{			TweenLite.to(bigList, .25, {y: 61, ease:Back.easeOut});		}		final function bigMove(event:MouseEvent):void		{			event.stopPropagation();			if (bigList.y< (460-((listItemCount)*44)) )			{				trace("WHILE LESS THAN: "+(460-((listItemCount)*44))+" "+bigList.y);				bigList.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP));				//var yPos:Number = bigList.y;				//TweenLite.to(bigList, .25, {y: yPos-44, onComplete: bounceUpReturn});			}		}		final function bounceUpReturn():void		{			trace("BOUNCERETURN");			var yPos:Number = bigList.y;			TweenLite.to(bigList, .25, {y: 460-((listItemCount+1)*44)+61, ease:Back.easeOut});		}		final function bigUp(event:MouseEvent):void		{			event.stopPropagation();			bigList.stopDrag();			var yPos:Number = bigList.y;			if (bigList.y<61 && bigList.y>(460-((listItemCount)*44)) )			{				TweenLite.to(bigList, .25, {y: yPos-44, ease:Back.easeOut});			}			else if (bigList.y>61)			{//bigList.y<190 && 				TweenLite.to(bigList, .25, {y: 61, ease:Back.easeOut});			}			else if (bigList.y<(460-((listItemCount)*44)) )			{				trace("AFTER LESS THAN: "+(460-((listItemCount)*44))+" "+bigList.y);				TweenLite.to(bigList, .25, {y: yPos-44, onComplete: bounceUpReturn});			}			bigList.removeEventListener(MouseEvent.MOUSE_UP, bigUp);			bigList.removeEventListener(MouseEvent.MOUSE_OUT, bigUp);			bigList.removeEventListener(MouseEvent.MOUSE_MOVE, bigMove);		}		final function bigrecentMouseOutHandler(event:MouseEvent):void		{			event.stopPropagation();			var clicked:Number = Number(event.currentTarget.name.split("_")[1]);			var itemRef = bigList.getChildByName(String("title_" + clicked));			itemRef.opaqueBackground = 0xffffff;			itemRef.outputField.textColor = 0x000000;			itemRef.dateField.textColor = 0x666666;			itemRef.arrow.color = 0x666666;		}		final function bigrecentReleaseHandler(event:MouseEvent):void		{			event.stopPropagation();			clearInterval(swipeRef);			var clicked:Number = Number(event.currentTarget.name.split("_")[1]);			var itemRef = bigList.getChildByName(String("title_" + clicked));			itemRef.opaqueBackground = 0xffffff;			itemRef.outputField.textColor = 0x000000;			itemRef.dateField.textColor = 0x666666;			itemRef.arrow.color = 0x666666;		}		final function recentPressHandler(event:MouseEvent):void		{			event.stopPropagation();			var clicked:Number = Number(event.currentTarget.name.split("_")[1]);			var itemRef = bottomList.getChildByName(String("title_" + clicked));			itemRef.opaqueBackground = 0x333333;			itemRef.outputField.textColor = 0xffffff;			itemRef.dateField.textColor = 0xffffff;			itemRef.arrow.color = 0xffffff;		}		final function recentMouseOutHandler(event:MouseEvent):void		{			event.stopPropagation();			var clicked:Number = Number(event.currentTarget.name.split("_")[1]);			var itemRef = bottomList.getChildByName(String("title_" + clicked));			itemRef.opaqueBackground = 0xffffff;			itemRef.outputField.textColor = 0x000000;			itemRef.dateField.textColor = 0x666666;			itemRef.arrow.color = 0x666666;		}		final function recentReleaseHandler(event:MouseEvent):void		{			event.stopPropagation();			var clicked:Number = Number(event.currentTarget.name.split("_")[1]);			var itemRef = bottomList.getChildByName(String("title_" + clicked));			itemRef.opaqueBackground = 0xffffff;			itemRef.outputField.textColor = 0x000000;			itemRef.dateField.textColor = 0x666666;			itemRef.arrow.color = 0x666666;		}		final function bigslideToRSSEntry(arg:String):void		{			var clicked:Number = Number(arg.split("_")[1]);			var itemRef = bigList.getChildByName(String("title_" + clicked));			TweenLite.to(sliderTitle, .25, {x: 330, alpha: 0});			TweenLite.to(infoButt, .25, {x: -10-infoButt.width, alpha: 0 });			TweenLite.to(title, .25, {x:(-10-title.width)});			TweenLite.to(bg, .25, {x:(-10-bg.width)});			TweenLite.to(meetingInfo, .25, {x: -10-meetingInfo.width});			TweenLite.to(bottomList, .25, {x: -330, y:256});			TweenLite.to(moreButt, .25, {x: -10-moreButt.width});			TweenLite.to(rsvpButt, .25, {x: -10-rsvpButt.width});			TweenLite.to(homeButt, .25, {x: 4, alpha: 1});			TweenLite.to(entryDetail, .25, {x: 100, alpha: 1});			itemRef.opaqueBackground = 0xffffff;			itemRef.outputField.textColor = 0x000000;			itemRef.dateField.textColor = 0x666666;			itemRef.arrow.color = 0x666666;			bigdisplayRSSEntry(clicked);		}		final function slideToRSSEntry(arg:String):void		{			var clicked:Number = Number(arg.split("_")[1]);			var itemRef = bottomList.getChildByName(String("title_" + clicked));			TweenLite.to(infoButt, .25, {x: -10-infoButt.width, alpha: 0 });			TweenLite.to(title, .25, {x:(-10-title.width)});			TweenLite.to(bg, .25, {x:(-10-bg.width)});			TweenLite.to(meetingInfo, .25, {x: -10-meetingInfo.width});			TweenLite.to(bottomList, .25, {x: -330, y:256});			TweenLite.to(moreButt, .25, {x: -10-moreButt.width});			TweenLite.to(rsvpButt, .25, {x: -10-rsvpButt.width});			TweenLite.to(homeButt, .25, {x: 4, alpha: 1});			TweenLite.to(entryDetail, .25, {x: 100, alpha: 1});			itemRef.opaqueBackground = 0xffffff;			itemRef.outputField.textColor = 0x000000;			itemRef.dateField.textColor = 0x666666;			itemRef.arrow.color = 0x666666;			displayRSSEntry(clicked);		}		final function slideToList():void		{			trace("slideToList");			TweenLite.to(sliderTitle, .25, {x: 109, alpha: 1});			TweenLite.to(infoButt, .25, {x: -10-infoButt.width, alpha: 0 });			TweenLite.to(title, .25, {x:(-10-title.width)});			TweenLite.to(bg, .25, {x:(-10-bg.width)});			TweenLite.to(meetingInfo, .25, {x: -10-meetingInfo.width});			TweenLite.to(bottomList, .25, {x: -330, y:256});			TweenLite.to(moreButt, .25, {x: -10-moreButt.width});			TweenLite.to(rsvpButt, .25, {x: -10-rsvpButt.width});			TweenLite.to(homeButt, .25, {x: 4, alpha: 1});			TweenLite.to(bigList, .25, {x: 0, y: 61});			homeButt.addEventListener(MouseEvent.MOUSE_DOWN, bighomeClick);			homeButt.addEventListener(MouseEvent.MOUSE_UP, bighomeClickUP);			homeButt.addEventListener(MouseEvent.MOUSE_OUT, bighomeClickOUT);		}		final function slideBackToList():void		{			trace("slideBackToList");			TweenLite.to(sliderTitle, .25, {x: 109, alpha: 1});			TweenLite.to(infoButt, .25, {x: -10-infoButt.width, alpha: 0 });			TweenLite.to(title, .25, {x:(-10-title.width)});			TweenLite.to(bg, .25, {x:(-10-bg.width)});			TweenLite.to(meetingInfo, .25, {x: -10-meetingInfo.width});			TweenLite.to(bottomList, .25, {x: -330, y:256});			TweenLite.to(moreButt, .25, {x: -10-moreButt.width});			TweenLite.to(rsvpButt, .25, {x: -10-rsvpButt.width});			TweenLite.to(homeButt, .25, {x: 4, alpha: 1});			TweenLite.to(bigList, .25, {x: 0, y: 61});			homeButt.addEventListener(MouseEvent.MOUSE_DOWN, homeClick);			homeButt.addEventListener(MouseEvent.MOUSE_UP, homeClickUP);			homeButt.addEventListener(MouseEvent.MOUSE_OUT, homeClickOUT);		}		final function slideToMain():void		{			trace("slideToMain");			TweenLite.to(title, .25, {x:4});			TweenLite.to(bg, .25, {x:0});			TweenLite.to(infoButt, .25, {x: 285, alpha: 1 });			TweenLite.to(meetingInfo, .25, {x: 21});			TweenLite.to(bottomList, .25, {x: 0, y:256 });			TweenLite.to(moreButt, .25, {x: 25});			TweenLite.to(rsvpButt, .25, {x: 172});			TweenLite.to(homeButt, .25, {alpha: 0, x: 325});			TweenLite.to(entryContainer, .25, {x:entryContainer.width+10});			TweenLite.to(entryDetail, .25, {x: 411, alpha: 0});			//addEventListener(MouseEvent.MOUSE_DOWN, touchStart, true, 1, false);		}		final function bighomeClick(event:MouseEvent):void		{			event.stopPropagation();			homeButt.coremc.gotoAndStop(2);		}		final function bighomeClickOUT(event:MouseEvent):void		{			event.stopPropagation();			homeButt.coremc.gotoAndStop(1);		}		final function bighomeClickUP(event:MouseEvent):void		{			event.stopPropagation();			homeButt.coremc.gotoAndStop(1);			homeButt.removeEventListener(MouseEvent.MOUSE_DOWN, homeClick);			homeButt.removeEventListener(MouseEvent.MOUSE_UP, homeClickUP);			homeButt.removeEventListener(MouseEvent.MOUSE_OUT, homeClickOUT);			TweenLite.to(sliderTitle, .25, {x: 330, alpha: 0});			TweenLite.to(bigList, .25, {x: 330});			slideToMain();		}		final function homeClick(event:MouseEvent):void		{			event.stopPropagation();			homeButt.coremc.gotoAndStop(2);		}		final function homeClickOUT(event:MouseEvent):void		{			event.stopPropagation();			homeButt.coremc.gotoAndStop(1);		}		final function homeClickUP(event:MouseEvent):void		{			event.stopPropagation();			trace("homeClickUP");			homeButt.coremc.gotoAndStop(1);			homeButt.removeEventListener(MouseEvent.MOUSE_DOWN, homeClick);			homeButt.removeEventListener(MouseEvent.MOUSE_UP, homeClickUP);			homeButt.removeEventListener(MouseEvent.MOUSE_OUT, homeClickOUT);			slideToMain();		}		final function entryhomeClickUP(event:MouseEvent):void		{			event.stopPropagation();			trace("entryhomeClickUP");			homeButt.coremc.gotoAndStop(1);			homeButt.removeEventListener(MouseEvent.MOUSE_DOWN, homeClick);			homeButt.removeEventListener(MouseEvent.MOUSE_UP, entryhomeClickUP);			homeButt.removeEventListener(MouseEvent.MOUSE_OUT, homeClickOUT);			slideBackToList();		}		// This sets up the home button when visited from the bigList		// It should slide back to the entries list instead		final function bigdisplayRSSEntry(arg:Number):void		{			trace("bigdisplayRSSEntry");			homeButt.addEventListener(MouseEvent.MOUSE_DOWN, homeClick);			homeButt.addEventListener(MouseEvent.MOUSE_UP, entryhomeClickUP);			homeButt.addEventListener(MouseEvent.MOUSE_OUT, homeClickOUT);			var entryText = items[arg].description.split("\n").join(" ");			entryText = entryText.split("\r").join(" ");			entryContainer.rssEntry.autoSize = "left";			entryContainer.rssEntry.htmlText = "<h2>" + items[arg].title + "</h2>" + "<h3>" + String(formatDate(items[arg].pubDate)) + "</h3><br/>" + entryText;			TweenLite.to(entryContainer, .25, {x:10, y:53});			entryContainer.addEventListener(MouseEvent.MOUSE_DOWN, scrollEntry);			entryContainer.addEventListener(MouseEvent.MOUSE_UP, scrollEntryOff);			entryContainer.addEventListener(MouseEvent.MOUSE_OUT, scrollEntryOff);			//removeEventListener(MouseEvent.MOUSE_DOWN, touchStart);		}		final function scrollEntryOff(event:MouseEvent):void		{			event.stopPropagation();			entryContainer.stopDrag();			if (contains(upDown))			{				removeChild(upDown);			}			entryContainer.removeEventListener(MouseEvent.MOUSE_MOVE, scrollEntryUpDown);			var yPos:Number = entryContainer.y;			if (mouseY < currMouseY - 5)			{				trace("SWIPED UP!");				//TweenLite.to(entryContainer, .25, {y:yPos-60, ease:Elastic.easeOut, onComplete: bounceEntryBackDown });			}			else if (mouseY > currMouseY + 5)			{				// stuff				//TweenLite.to(entryContainer, .25, {y:yPos+60, ease:Elastic.easeOut, onComplete: bounceEntryBackUp });				trace("SWIPED DOWN!");			}		}		final function bounceEntryBackDown():void		{			var yPos:Number = entryContainer.y;			TweenLite.to(entryContainer, .25, {y:yPos+60  });		}		final function bounceEntryBackUp():void		{			var yPos:Number = entryContainer.y;			TweenLite.to(entryContainer, .25, {y:yPos-60 });		}		final function scrollEntry(event:MouseEvent):void		{			event.stopPropagation();			if (contains(upDown))			{				removeChild(upDown);			}			else			{				addChild(upDown);				setChildIndex(upDown, getChildIndex(entryContainer));				upDown.x = 320 / 2;				upDown.y = 460 / 2;				entryContainer.addEventListener(MouseEvent.MOUSE_MOVE, scrollEntryUpDown);			}		}		final function centerArrow(event:Event):void		{			event.stopPropagation();			trace(entryContainer.y, 50, entryContainer.height);		}		final function scrollEntryUpDown(event:MouseEvent):void		{			event.stopPropagation();			//addEventListener(Event.ENTER_FRAME, centerArrow);			entryContainer.removeEventListener(MouseEvent.MOUSE_MOVE, scrollEntryUpDown);			entryContainer.startDrag(false,new Rectangle(10, 50, 0, 400-entryContainer.height ) );			currMouseY = mouseY;		}		final function displayRSSEntry(arg:Number):void		{			trace("displayRSSEntry");			homeButt.addEventListener(MouseEvent.MOUSE_DOWN, homeClick);			homeButt.addEventListener(MouseEvent.MOUSE_UP, homeClickUP);			homeButt.addEventListener(MouseEvent.MOUSE_OUT, homeClickOUT);			var entryText = items[arg].description.split("\n").join(" ");			entryText = entryText.split("\r").join(" ");			entryContainer.rssEntry.autoSize = "left";			entryContainer.rssEntry.htmlText = "<h2>" + items[arg].title + "</h2>" + "<h3>" + String(formatDate(items[arg].pubDate)) + "</h3><br/>" + entryText;			TweenLite.to(entryContainer, .25, {x:10, y:53});			//removeEventListener(MouseEvent.MOUSE_DOWN, touchStart);			entryContainer.addEventListener(MouseEvent.MOUSE_DOWN, scrollEntry);			entryContainer.addEventListener(MouseEvent.MOUSE_UP, scrollEntryOff);			entryContainer.addEventListener(MouseEvent.MOUSE_OUT, scrollEntryOff);		}		final function turnOffButtons():void		{			moreButt.visible = false;			rsvpButt.visible = false;			moreButt.removeEventListener(MouseEvent.MOUSE_DOWN, handleButtDownState);			rsvpButt.removeEventListener(MouseEvent.MOUSE_DOWN, handleButtDownState);			moreButt.removeEventListener(MouseEvent.MOUSE_OUT, handleButtOUTState, true);			moreButt.removeEventListener(MouseEvent.MOUSE_UP, handleButtUPState, true);			rsvpButt.removeEventListener(MouseEvent.MOUSE_OUT, handleButtOUTState, true);			rsvpButt.removeEventListener(MouseEvent.MOUSE_UP, handleButtUPState, true);		}		// Handle IO/Security Errors on XML LOAD		final function onIOError(e:IOErrorEvent):void		{			meetingInfo.styleSheet = appCSS;			meetingInfo.htmlText = "<t3>Sorry - Network/Data error.</t3><br/><t3>Please try again later.</t3>";			turnOffButtons();			removeEventListener(Event.ENTER_FRAME,rotateLoader);			loader_mc.visible = false;			trace("IOError : " + e.text);		}		final function onSecurityError(e:SecurityErrorEvent):void		{			meetingInfo.styleSheet = appCSS;			meetingInfo.htmlText = "<t3>Sorry - Network/Data error.</t3><br/><t3>Please try again later.</t3>";			turnOffButtons();			removeEventListener(Event.ENTER_FRAME,rotateLoader);			loader_mc.visible = false;			trace("SecurityError : " + e.text);		}		final function infoClickOUT(event:MouseEvent):void		{			event.stopPropagation();			infoButt.coremc.gotoAndStop(1);		}		final function infoClick(event:MouseEvent):void		{			event.stopPropagation();			infoButt.coremc.gotoAndStop(2);		}		final function infoClickUP(event:MouseEvent):void		{			event.stopPropagation();			infoButt.coremc.gotoAndStop(1);			TweenLite.to(infoButt, .25, {x: -10-infoButt.width, alpha: 0 });			TweenLite.to(title, .25, {x:(-10-title.width)});			TweenLite.to(bg, .25, {x:(-10-bg.width)});			TweenLite.to(meetingInfo, .25, {x: -10-meetingInfo.width});			TweenLite.to(bottomList, .25, {x: -330, y:256});			TweenLite.to(moreButt, .25, {x: -10-moreButt.width});			TweenLite.to(rsvpButt, .25, {x: -10-rsvpButt.width});			TweenLite.to(homeButt, .25, {x: 4, alpha: 1});			displayAbout();		}		final function displayAbout():void		{			//TweenLite.to(aboutTitle, .25, {x: -10-aboutTitle.width});			homeButt.addEventListener(MouseEvent.MOUSE_DOWN, homeAboutClick);			homeButt.addEventListener(MouseEvent.MOUSE_UP, homeAboutClickUP);			homeButt.addEventListener(MouseEvent.MOUSE_OUT, homeAboutClickOUT);			TweenLite.to(aboutContent, .25, {x: 0});		}		final function homeAboutClick(event:MouseEvent):void		{			event.stopPropagation();			homeButt.coremc.gotoAndStop(2);		}		final function homeAboutClickOUT(event:MouseEvent):void		{			event.stopPropagation();			homeButt.coremc.gotoAndStop(1);		}		final function homeAboutClickUP(event:MouseEvent):void		{			event.stopPropagation();			homeButt.removeEventListener(MouseEvent.MOUSE_DOWN, homeAboutClick);			homeButt.removeEventListener(MouseEvent.MOUSE_UP, homeAboutClickUP);			homeButt.removeEventListener(MouseEvent.MOUSE_OUT, homeAboutClickOUT);			homeButt.coremc.gotoAndStop(1);			TweenLite.to(aboutContent, .25, {x: 330});			slideToMain();		}									/* TODO:				Application dev notes:				1.0 Release submission: Philly Geek Central				DONE: Icon to go with Philly Geek Central theme		DONE: Default.png to match final app prevent font shift		DONE: Double check all fonts/alignment		DONE: Fix date in entry listings to show time		DONE: Make sure to add scroller indicator on entry field when coming from first 4 entries		DONE: Add handlers for displaying error message on network/data errors		DONE: Adjust height position of "ENTRY DETAIL" shift up a few pixels		DONE: On entry page from previous list, jump back to previous list instead of home w/Entries button		DONE: Create a previous entries page to swap to		DONE: Add info button and ABOUT page		DONE: Turn off orientation features till 1.1		DONE: Button State for HOME		DONE: Change 4th item to previous entries		DONE: Add title, date, styling to entries		DONE: Button states for more info and RSVP				1.1 Maintenance Release				DONE: Cleanup code: proper class/package and comments for readbility		DONE: Incorporate Adobe tracking code/component		1. Optimize code as much as possible according to guidelines		HALF DONE: 2. Scrolling control/swipe gesture for Previous Entries list and individual RSS entry views		3. Replace my kludgy swipe/scroll with real SWIPE_GESTURE when bug is fixed by Adobe		4. Add iPhone UI style scroll bar indicators when swipe/scrolling on right hand side and proper bounce/tension/release action		5. Re-work events to handle press/down and swipe interaction better/more reliably.		6. Re-factor event handling/setup and several functions that are essentially duplicates - set up proper structure to reduce redundant code						1.2 Update Release				1. Check on support for img tag in beta (not sure if its supported on iPhone/AIR target)		2. Add support for multiple groups on first page (defaults and adding additional groups)		3. Add support for auto orientation/sizing		4. Add suppport for multi-touch resize of entry		5. Add support for iPad resolution and size/layout		6. Add "Posted by " with author name, once site feed migrates to Wordpress from Pivot where the author tag is supported in RSS 2.0		8. Warn on click of info and more that you are launching mobile Safari.		9. Add plist structure to support app launch type - to be able to launch the app from html like: phillygeekcentral://				*/			}}